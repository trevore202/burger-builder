{"version":3,"sources":["containers/Authorization/Authorization.js","components/UI/Input/Input.js"],"names":["Authorization","state","controls","email","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","password","minLength","isSignup","inputChangedHandler","event","controlName","updatedControls","target","checkValidity","setState","submitHandler","e","preventDefault","props","onAuth","switchAuthModeHandler","prevState","this","building","authRedirectPath","onSetAuthRedirectPath","rules","isValid","trim","length","maxLength","formElementsArray","key","push","id","config","form","map","formElement","invalid","shouldValidate","changed","loading","errorMessage","error","message","authRedirect","isAuthenticated","to","className","onSubmit","btnType","clicked","Component","connect","auth","token","bgbld","dispatch","actions","input","inputElement","inputClasses","join","onChange","options","option","displayValue","label"],"mappings":"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","file":"static/js/4.4e542b2d.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport { Redirect } from 'react-router-dom'\r\nimport { connect } from 'react-redux'\r\nimport Input from '../../components/UI/Input/Input'\r\nimport Button from '../../components/UI/Button/Button'\r\nimport Spinner from '../../components/UI/Spinner/Spinner'\r\nimport './Authorization.css'\r\nimport * as actions from '../../store/actions/index'\r\n\r\nclass Authorization extends Component {\r\n    state = {\r\n        controls: {\r\n            email: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'email',\r\n                    placeholder: 'Email address'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            password: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'password',\r\n                    placeholder: 'Password'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    minLength: 6\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            }\r\n        },\r\n        isSignup: true\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (!this.props.building && this.props.authRedirectPath !== '/') {\r\n            this.props.onSetAuthRedirectPath()\r\n        }\r\n    }\r\n\r\n    checkValidity(value, rules) {\r\n        let isValid = true\r\n        if (!rules) {\r\n            return true\r\n        }\r\n        if (rules.required) {\r\n            isValid = value.trim() !== ''\r\n        }\r\n        if (isValid && rules.minLength) {\r\n            isValid = value.length >= rules.minLength\r\n        }\r\n        if (isValid && rules.maxLength) {\r\n            isValid = value.length <= rules.maxLength\r\n        }\r\n\r\n        return isValid\r\n    }\r\n\r\n    inputChangedHandler = (event, controlName) => {\r\n        const updatedControls = {\r\n            ...this.state.controls,\r\n            [controlName]: {\r\n                ...this.state.controls[controlName],\r\n                value: event.target.value,\r\n                valid: this.checkValidity(event.target.value, this.state.controls[controlName].validation),\r\n                touched: true\r\n            }\r\n        }\r\n        this.setState({controls: updatedControls})\r\n    }\r\n\r\n    submitHandler = e => {\r\n        e.preventDefault()\r\n        this.props.onAuth(this.state.controls.email.value, this.state.controls.password.value, this.state.isSignup)\r\n    }\r\n\r\n    switchAuthModeHandler = () => {\r\n        this.setState(prevState => {\r\n            return {\r\n                isSignup: !prevState.isSignup\r\n            }\r\n        })\r\n    }\r\n\r\n    render() {\r\n\r\n        const formElementsArray = []\r\n        for (let key in this.state.controls) {\r\n            formElementsArray.push({\r\n                id: key,\r\n                config: this.state.controls[key]\r\n            })\r\n        }\r\n\r\n        let form = formElementsArray.map(\r\n            formElement => (\r\n                <Input\r\n                    key={formElement.id}\r\n                    elementType={formElement.config.elementType}\r\n                    elementConfig={formElement.config.elementConfig}\r\n                    value={formElement.config.value}\r\n                    invalid={!formElement.config.valid}\r\n                    shouldValidate={formElement.config.validation}\r\n                    touched={formElement.config.touched}\r\n                    changed={(event) => this.inputChangedHandler(event, formElement.id)} />\r\n            )\r\n        )\r\n\r\n        if (this.props.loading) {\r\n            form = <Spinner />\r\n        }\r\n\r\n        let errorMessage = null;\r\n\r\n        if (this.props.error) {\r\n            errorMessage = (\r\n                <p>{this.props.error.message}</p>\r\n            )\r\n        }\r\n\r\n        let authRedirect = null\r\n        if (this.props.isAuthenticated) {\r\n            authRedirect = <Redirect to={this.props.authRedirectPath} />\r\n        }\r\n\r\n        return (\r\n            <div className='Authorization'>\r\n                {authRedirect}\r\n                {errorMessage}\r\n                <form onSubmit = {this.submitHandler}>\r\n                    {form}\r\n                    <Button btnType='Success'>{this.state.isSignup ? 'Register' : 'Sign in'}</Button>\r\n                </form>\r\n                <Button btnType='Danger'\r\n                clicked={this.switchAuthModeHandler} >To {this.state.isSignup ? 'Sign In' : 'Register'} Page</Button> \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        loading: state.auth.loading,\r\n        error: state.auth.error,\r\n        isAuthenticated: state.auth.token !== null,\r\n        building: state.bgbld.building,\r\n        authRedirectPath: state.auth.authRedirectPath\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onAuth: (email, password, isSignup) => dispatch(actions.auth(email, password, isSignup)),\r\n        onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/'))\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Authorization)","import React from 'react'\r\nimport './Input.css'\r\n\r\nconst input = props => {\r\n    let inputElement\r\n    const inputClasses = ['MyInputElement']\r\n\r\n    if (props.invalid && props.shouldValidate && props.touched) {\r\n        inputClasses.push('Invalid')\r\n    }\r\n\r\n    switch (props.elementType) {\r\n        case ('input'):\r\n            inputElement = (\r\n                <input\r\n                    className={inputClasses.join(' ')}\r\n                    {...props.elementConfig}\r\n                    value={props.value}\r\n                    onChange = {props.changed} />\r\n            )\r\n            break\r\n        case ('select'):\r\n            inputElement = (\r\n                <select className={inputClasses.join(' ')} onChange = {props.changed} >\r\n                    {props.elementConfig.options.map(\r\n                        option => (\r\n                            <option key={option.value} value={option.value} >{option.displayValue}</option>\r\n                        )\r\n                    )}\r\n                </select>\r\n            )\r\n            break\r\n        case ('textarea'):\r\n            inputElement = (\r\n                <textarea\r\n                className={inputClasses.join(' ')}\r\n                {...props.elementConfig}\r\n                value={props.value}\r\n                onChange = {props.changed} />\r\n            )\r\n            break\r\n        default:\r\n            inputElement = (\r\n                <input\r\n                className={inputClasses.join(' ')}\r\n                {...props.elementConfig}\r\n                value={props.value}\r\n                onChange = {props.changed} />\r\n            )\r\n    }\r\n\r\n    return (\r\n        <div className='MyInput'>\r\n            <label className='MyLabel'>{props.label}</label>\r\n            {inputElement}\r\n        </div>\r\n    )\r\n}\r\nexport default input"],"sourceRoot":""}