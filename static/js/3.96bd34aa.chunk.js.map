{"version":3,"sources":["components/Order/CheckoutSummary/CheckoutSummary.js","containers/Checkout/ContactData/ContactData.js","containers/Checkout/Checkout.js","components/UI/Input/Input.js"],"names":["checkoutSummary","props","className","style","width","margin","Burger","ingredients","Button","btnType","clicked","cancel","continue","ContactData","state","orderForm","name","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","street","zip","minLength","maxLength","country","email","deliveryMethod","options","displayValue","formisValid","orderHandler","event","preventDefault","formData","formElementID","order","ings","price","orderData","userId","OnOrderSubmit","token","inputChangedHandler","inputID","updatedOrderForm","updatedFormElement","target","checkValidity","inputIDs","setState","rules","isValid","trim","length","formElementsArray","key","this","push","id","config","form","onSubmit","map","formElement","Input","invalid","shouldValidate","changed","disabled","loading","Spinner","Component","connect","bgbld","totalPrice","ord","auth","dispatch","actions","withErrorHandler","axios","Checkout","purchaseContinueHandler","history","cancelPurchaseHandler","goBack","summary","to","purchasedRedirect","purchased","path","match","component","input","inputElement","inputClasses","join","onChange","option","label"],"mappings":"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","file":"static/js/3.96bd34aa.chunk.js","sourcesContent":["import React from 'react'\r\nimport Burger from '../../Burger/Burger'\r\nimport Button from '../../UI/Button/Button'\r\nimport './CheckoutSummary.css'\r\n\r\nconst checkoutSummary = props => {\r\n    return(\r\n        <div className='CheckoutSummary'>\r\n            <h1>Enjoy your burger!</h1>\r\n            <div style ={{width:'100%', margin:'auto'}}>\r\n                <Burger ingredients={props.ingredients} />\r\n            </div>\r\n            <Button btnType='Danger' clicked={props.cancel} >Cancel</Button>\r\n            <Button btnType='Success' clicked={props.continue} >Continue</Button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default checkoutSummary","import React, { Component } from 'react'\r\nimport Button from '../../../components/UI/Button/Button'\r\nimport './ContactData.css'\r\nimport axios from '../../../axios-orders';\r\nimport Spinner from '../../../components/UI/Spinner/Spinner'\r\nimport Input from '../../../components/UI/Input/Input'\r\nimport withErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler'\r\n\r\nimport { connect } from 'react-redux'\r\n\r\nimport * as actions from '../../../store/actions/index'\r\n\r\nclass ContactData extends Component {\r\n    state = {\r\n        orderForm: {\r\n            name: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Your Name'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            street: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Your Street'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            zip: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Your Zip Code'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    minLength: 5,\r\n                    maxLength: 5\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            country: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Your Country'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            email: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'email',\r\n                    placeholder: 'Your Email'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            deliveryMethod: {\r\n                elementType: 'select',\r\n                elementConfig: {\r\n                    options: [\r\n                        { value: 'fastest', displayValue: 'Fastest' },\r\n                        { value: 'cheapest', displayValue: 'Cheapest' }\r\n                    ]\r\n                },\r\n                value:'fastest',\r\n                valid: true\r\n            }\r\n        },\r\n        formisValid: false\r\n    }\r\n\r\n    orderHandler = (event) => {\r\n        event.preventDefault()\r\n        const formData = {}\r\n        for (let formElementID in this.state.orderForm) {\r\n            formData[formElementID] = this.state.orderForm[formElementID].value\r\n        }\r\n        const order = {\r\n            ingredients: this.props.ings,\r\n            price: this.props.price,\r\n            orderData: formData,\r\n            userId: this.props.userId\r\n        }\r\n        this.props.OnOrderSubmit(order, this.props.token)\r\n    }\r\n\r\n    checkValidity(value, rules) {\r\n        let isValid = true\r\n        if (!rules) {\r\n            return true\r\n        }\r\n        if (rules.required) {\r\n            isValid = value.trim() !== ''\r\n        }\r\n        if (isValid && rules.minLength) {\r\n            isValid = value.length >= rules.minLength\r\n        }\r\n        if (isValid && rules.maxLength) {\r\n            isValid = value.length <= rules.maxLength\r\n        }\r\n\r\n        return isValid\r\n    }\r\n\r\n    inputChangedHandler = (event, inputID) => {\r\n        //create copy of the state so you don't chang the state object\r\n        const updatedOrderForm = {\r\n            ...this.state.orderForm\r\n        }\r\n        //creates deep copy\r\n        // or copy of the objects within the state. (nested objects in the updatedOrderForm \r\n        // variable are still pointing to the same object that the state is pointing to)\r\n        const updatedFormElement = { ...updatedOrderForm[inputID] }\r\n\r\n        //update value of the nested object copy\r\n        updatedFormElement.value = event.target.value\r\n\r\n        //validation of the value\r\n        updatedFormElement.valid = this.checkValidity(updatedFormElement.value, updatedFormElement.validation)\r\n        updatedFormElement.touched = true\r\n\r\n        //change the value in the whole state copy to the new element\r\n        updatedOrderForm[inputID] = updatedFormElement\r\n        \r\n        let formisValid = true\r\n        for (let inputIDs in updatedOrderForm) {\r\n            formisValid = updatedOrderForm[inputIDs].valid && formisValid\r\n        }\r\n\r\n        //set new state\r\n        this.setState({\r\n            orderForm: updatedOrderForm,\r\n            formisValid: formisValid\r\n        })\r\n\r\n    }\r\n\r\n    render() {\r\n        const formElementsArray = []\r\n        for (let key in this.state.orderForm) {\r\n            formElementsArray.push({\r\n                id: key,\r\n                config: this.state.orderForm[key]\r\n            })\r\n        }\r\n\r\n        let form = (\r\n            <form onSubmit={this.orderHandler}>\r\n                {formElementsArray.map(\r\n                    formElement => (\r\n                        <Input\r\n                            key={formElement.id}\r\n                            elementType={formElement.config.elementType}\r\n                            elementConfig={formElement.config.elementConfig}\r\n                            value={formElement.config.value}\r\n                            invalid={!formElement.config.valid}\r\n                            shouldValidate={formElement.config.validation}\r\n                            touched={formElement.config.touched}\r\n                            changed={(event) => this.inputChangedHandler(event, formElement.id)} />\r\n                    )\r\n                )}\r\n                <Button\r\n                    btnType='Success'\r\n                    clicked={this.orderHandler}\r\n                    disabled={!this.state.formisValid}\r\n                >ORDER NOW</Button>\r\n            </form>\r\n        )\r\n        if (this.props.loading) {\r\n            form = <Spinner />\r\n        }\r\n        return (\r\n            <div className='ContactData'>\r\n                <h4>Enter Contact Information</h4>\r\n                {form}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state =>{\r\n    return{\r\n        ings: state.bgbld.ingredients,\r\n        price: state.bgbld.totalPrice,\r\n        loading: state.ord.loading,\r\n        token: state.auth.token,\r\n        userId: state.auth.userId\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return{\r\n        OnOrderSubmit: (order, token) => dispatch(actions.tryPurchaseBurger(order, token))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(ContactData, axios))","import React, { Component } from 'react'\r\nimport CheckoutSummary from '../../components/Order/CheckoutSummary/CheckoutSummary'\r\nimport { Route, Redirect } from 'react-router-dom'\r\nimport ContactData from './ContactData/ContactData'\r\nimport { connect } from 'react-redux'\r\n\r\nclass Checkout extends Component {\r\n\r\n    purchaseContinueHandler = () => {\r\n        this.props.history.push('/checkout/contact-data')\r\n    }\r\n\r\n    cancelPurchaseHandler = () => {\r\n        this.props.history.goBack()\r\n    }\r\n\r\n    render() {\r\n        let summary = <Redirect to='/' />\r\n        if (this.props.ings) {\r\n            const purchasedRedirect = this.props.purchased ? <Redirect to='/' /> : null\r\n            summary = (\r\n                <div>\r\n                    {purchasedRedirect}\r\n                    <CheckoutSummary ingredients={this.props.ings}\r\n                        cancel={this.cancelPurchaseHandler}\r\n                        continue={this.purchaseContinueHandler} />\r\n                    <Route path={this.props.match.path + '/contact-data'} component={ContactData} />\r\n                </div>\r\n            )\r\n        }\r\n        return (\r\n            <div>{summary}</div>\r\n            \r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        ings: state.bgbld.ingredients,\r\n        purchased: state.ord.purchased\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Checkout)","import React from 'react'\r\nimport './Input.css'\r\n\r\nconst input = props => {\r\n    let inputElement\r\n    const inputClasses = ['MyInputElement']\r\n\r\n    if (props.invalid && props.shouldValidate && props.touched) {\r\n        inputClasses.push('Invalid')\r\n    }\r\n\r\n    switch (props.elementType) {\r\n        case ('input'):\r\n            inputElement = (\r\n                <input\r\n                    className={inputClasses.join(' ')}\r\n                    {...props.elementConfig}\r\n                    value={props.value}\r\n                    onChange = {props.changed} />\r\n            )\r\n            break\r\n        case ('select'):\r\n            inputElement = (\r\n                <select className={inputClasses.join(' ')} onChange = {props.changed} >\r\n                    {props.elementConfig.options.map(\r\n                        option => (\r\n                            <option key={option.value} value={option.value} >{option.displayValue}</option>\r\n                        )\r\n                    )}\r\n                </select>\r\n            )\r\n            break\r\n        case ('textarea'):\r\n            inputElement = (\r\n                <textarea\r\n                className={inputClasses.join(' ')}\r\n                {...props.elementConfig}\r\n                value={props.value}\r\n                onChange = {props.changed} />\r\n            )\r\n            break\r\n        default:\r\n            inputElement = (\r\n                <input\r\n                className={inputClasses.join(' ')}\r\n                {...props.elementConfig}\r\n                value={props.value}\r\n                onChange = {props.changed} />\r\n            )\r\n    }\r\n\r\n    return (\r\n        <div className='MyInput'>\r\n            <label className='MyLabel'>{props.label}</label>\r\n            {inputElement}\r\n        </div>\r\n    )\r\n}\r\nexport default input"],"sourceRoot":""}